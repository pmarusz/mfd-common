name: CI Build Reusable Workflow
on:
  workflow_call:
    secrets:
      GH_TOKEN:
        description: 'GitHub token for authentication'
        required: true
      PYPI_TOKEN:
        description: 'PyPI API token to publish package'
        required: false
    inputs:
      RELEASE_STEPS:
        description: 'Should the package be uploaded to PyPI?'
        required: false
        default: false
        type: boolean
      REPOSITORY_NAME:
        description: 'Repository name'
        required: false
        type: string
      BRANCH_NAME:
        description: 'Branch name to checkout'
        required: true
        type: string
      PYTHON_VERSION:
        description: 'Python version to use'
        required: false
        default: '3.10.11'
        type: string
      RELEASE_BUILD:
        description: 'Is release build?'
        required: false
        default: false
        type: boolean
      PROJECT_NAME:
        description: 'Project name for tests'
        required: true
        type: string
      RUNS_ON:
        description: 'Runner type for the job'
        required: false
        default: 'ubuntu-latest'
        type: string
      JOB_NAME:
        description: 'Name of the job'
        required: false
        default: 'build_whl'
        type: string

jobs:
  build_whl:
    name: ${{ inputs.JOB_NAME }}
    runs-on: ${{ inputs.RUNS_ON }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
          ref: ${{ inputs.BRANCH_NAME }}
          repository: ${{ inputs.REPOSITORY_NAME }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}
          cache: 'pip'

      - name: Show python version
        run: python --version

      - name: Run mfd-create-config-files
        run: |
          pip install -r requirements-dev.txt
          mfd-create-config-files --project-dir .

      - name: Check if bump version is expected
        id: check_bump
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -Ei '^(docs|test|ci|refactor|perf|chore|revert):\s'; then
            echo "CREATE_WHL=false" >> $GITHUB_ENV
            echo "No version bump needed for commit message: $COMMIT_MSG, ending job"
          else
            echo "CREATE_WHL=true" >> $GITHUB_ENV
            echo "Version bump needed for commit message: $COMMIT_MSG, continuing job"
          fi

      - name: Run python-semantic-release
        if: env.CREATE_WHL == 'true'
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          build: true
          vcs_release: false
          push: false
          strict: true

      - name: Check if .whl is installable
        if: env.CREATE_WHL == 'true'
        shell: bash
        run: |
          python -m pip install dist/*.whl

      - name: Publish package distributions to PyPI
        if: env.CREATE_WHL == 'true' && inputs.RELEASE_BUILD == true && inputs.RELEASE_STEPS == true
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: 'dist'
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Publish comment how to build .whl
        if: env.CREATE_WHL == 'true' && inputs.RELEASE_BUILD == false && (github.event.pull_request != null && github.event.pull_request.head.repo.full_name == github.repository)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const commentBody = "We don't publish DEVs .whl.\n To build .whl, run 'pip install git+https://${{ inputs.REPOSITORY_NAME }}@${{ inputs.BRANCH_NAME }}'";

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const alreadyCommented = comments.some(comment => comment.body === commentBody);

            if (!alreadyCommented) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }
